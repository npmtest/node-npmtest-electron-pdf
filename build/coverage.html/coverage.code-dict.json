{"/home/travis/build/npmtest/node-npmtest-electron-pdf/test.js":"/* istanbul instrument in package npmtest_electron_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/lib.npmtest_electron_pdf.js":"/* istanbul instrument in package npmtest_electron_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_electron_pdf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_electron_pdf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-electron-pdf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_electron_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_electron_pdf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_electron_pdf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_electron_pdf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_electron_pdf.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_electron_pdf.__dirname +\n                    '/lib.npmtest_electron_pdf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/index.js":"'use strict'\n\nconst EventEmitter = require('eventemitter2').EventEmitter2\n\nconst electron = require('electron')\nconst minimist = require('minimist')\n\nconst argOptions = require('./options')\nconst setLogger = require('./logger').set\n\nconst ExportJob = require('./exportJob')\nconst Source = require('./source')\nconst source = new Source()\n\nlet electronApp\n\n/**\n * Runs an Electron application used to export HTML to PDF Documents\n */\nclass PDFExporter extends EventEmitter {\n\n  // ------------------------------------------------------------------\n  // ------------------ Public API ------------------------------------\n  // ------------------------------------------------------------------\n  /**\n   * @constructor\n   * @param opts\n   * @param {boolean} [opts.resilient=false] set to true to catch and\n   * log all uncaught exception but leave things running\n   * @param {object} [opts.loggers] Allows client to use its own logging implementation\n   */\n  constructor (opts) {\n    super()\n    this.options = opts || {}\n    this.reslientMode = this.options.resilient || false\n    setLogger(this.options.loggers)\n  }\n\n  /**\n   * Starts the electron app\n   *\n   * @fires PDFExporter#charged\n   */\n  start () {\n    electronApp = electron.app\n\n    electronApp.once('ready', () => {\n      this.isReady = true\n\n      /**\n       * emitted when the application is ready to process exports\n       * @event PDFExporter#charged\n       */\n      this.emit('charged')\n    })\n\n    electronApp.on('window-all-closed', function () {\n      if (process.platform !== 'darwin') {\n        // electronApp.quit()\n      }\n    })\n\n    // Stop Electron on SIG*\n    process.on('exit', code => electronApp.exit(code))\n\n    // Passthrough error handler to silence Electron GUI prompt\n    process.on('uncaughtException', err => {\n      if (this.reslientMode) {\n        console.log('Something unexpectedly bad happened ' +\n          '(but electron-pdf was initialized in resilient mode ' +\n          'and will remain operational):', err)\n      } else {\n        throw err\n      }\n    })\n  }\n\n  stop () {\n    console.log('Shutting down...')\n    electronApp.quit()\n  }\n\n  /**\n   * Load one or more HTML pages inside of a new window which is closed\n   * as soon as the PDFs are rendered.\n   *\n   * @param input {String} URL for filepath\n   * @param output {String} Filename\n   * @param args {array|Object} command line args - Can be an array of any\n   *   supported args, or an object that is the result of running minimist.\n   * @param options {Object} export args - see ExportJob for list of options.\n   * These are options only supported by the API and not by the CLI\n   */\n  createJob (input, output, args, options) {\n    if (!this.isReady) {\n      const msg = 'Electron is not ready, make sure to register an event listener for \"charged\" and invoke start()'\n      throw msg\n    }\n\n    // charge.js interprets the args, but this method should also support raw args\n    if (args instanceof Array) {\n      args = minimist(args, argOptions)\n    }\n\n    return new Promise((resolve, reject) => {\n      source.resolve(input, args).then(sources => {\n        resolve(new ExportJob(sources, output, args, options))\n      })\n    })\n  }\n\n}\n\nmodule.exports = PDFExporter\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/node_modules/electron/index.js":"var fs = require('fs')\nvar path = require('path')\n\nvar pathFile = path.join(__dirname, 'path.txt')\n\nif (fs.existsSync(pathFile)) {\n  module.exports = path.join(__dirname, fs.readFileSync(pathFile, 'utf-8'))\n} else {\n  throw new Error('Electron failed to install correctly, please delete node_modules/' + path.basename(__dirname) + ' and try installing again')\n}\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/options.js":"\n//  TODO: Generate Usage Doc from argv options\n\nvar options = {\n  booleans: ['printBackground', 'landscape', 'printSelectionOnly', 'waitForJSEvent'],\n  alias: {\n    'input': 'i',\n    'output': 'o',\n\n    'browserConfig': [],\n    'cookie': ['cookies'],\n    'css': 'c',\n    'disableCache': 'd',\n    'help': 'h',\n    'landscape': 'l',\n    'marginsType': ['m', 'marginType'],\n    'orientation': ['o', 'orientations'],\n    'outputWait': 'w',\n    'pageSize': 'p',\n    'printBackground': 'b',\n    'printSelectionOnly': 's',\n    'version': 'v',\n    'waitForJSEvent': 'e'\n  },\n  default: {\n    'landscape': false,\n    'marginsType': 1,\n    'outputWait': 0,\n    'pageSize': 'A4',\n    'printBackground': true,\n    'printSelectionOnly': false,\n    'waitForJSEvent': false\n  }\n}\n\nmodule.exports = options\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/logger.js":"const debugLib = require('debug')\nconst errorLogger = debugLib('electronpdf:error:')\nconst infoLogger = debugLib('electronpdf:info:')\nconst debugLogger = debugLib('electronpdf:debug:')\n\n// https://github.com/winstonjs/winston#logging-levels\nconst LEVELS = {\n  error: 0,\n  info: 2,\n  debug: 4\n}\n\nconst loggers = {\n  0: errorLogger,\n  2: infoLogger,\n  4: debugLogger\n}\n\n/**\n * Accepts an object to override one or more loggers.  Provide a function for\n * one of the following log levels.  The function should accept varargs to be\n * logged.\n *\n * {\n *   error: function\n *   info: function\n *   debug : function\n * }\n * @param loggers\n */\nfunction set (loggerObj) {\n  if (loggerObj) {\n    loggers[LEVELS.error] = loggerObj.error || loggers[LEVELS.error]\n    loggers[LEVELS.info] = loggerObj.info || loggers[LEVELS.info]\n    loggers[LEVELS.debug] = loggerObj.debug || loggers[LEVELS.debug]\n  }\n}\n\nfunction error () {\n  loggers[LEVELS.error](...arguments)\n}\n\nfunction info () {\n  loggers[LEVELS.info](...arguments)\n}\n\nfunction debug () {\n  loggers[LEVELS.debug](...arguments)\n}\n\nmodule.exports = info\nmodule.exports.info = info\nmodule.exports.debug = debug\nmodule.exports.error = error\nmodule.exports.set = set\n\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/exportJob.js":"'use strict'\n\n// Node Modules\nconst async = require('async')\nconst fs = require('fs')\nconst path = require('path')\nconst url = require('url')\n\n// Third Party Modules\nconst _ = require('lodash')\nconst EventEmitter = require('eventemitter2').EventEmitter2\nconst electron = require('electron')\nconst uuid = require('uuid')\n\nconst setLogger = require('./logger').set\nconst logger = require('./logger')\nconst errorLogger = require('./logger').error\nconst debugLogger = require('./logger').debug\nconst WindowTailor = require('./windowTailor')\nconst WindowMaid = require('./windowMaid')\nconst wargs = require('./args')\n\n// CONSTANTS\n\n/** Interval for which to check for hung windows, in milliseconds */\nconst HUNG_WINDOW_CLEANUP_INTERVAL = process.env.ELECTRONPDF_WINDOW_CLEANUP_INTERVAL || 1000 * 30 /* seconds */\n\n/** When a ready event option is set, this is the default timeout.  It is overridden by the wait option */\nconst MAX_READY_EVENT_WAIT = 10000\n/** Amount of millis to wait before invoking WebContents.capturePage for PNG exports */\nconst PNG_CAPTURE_DELAY = process.env.ELECTRONPDF_PNG_CAPTURE_DELAY || 100\n/** The event name for which Electron IPC is done over */\nconst IPC_MAIN_CHANNEL_RENDER = 'READY_TO_RENDER'\n/** Prepended to events emitted during rendering */\nconst RENDER_EVENT_PREFIX = 'job.render.'\n\nconst DEFAULT_OPTIONS = {\n  closeWindow: true,\n  inMemory: false\n}\n\n// Use the maid to ensure we don't leak windows\nsetInterval(WindowMaid.cleanupHungWindows, HUNG_WINDOW_CLEANUP_INTERVAL)\n\n/**\n * A job should be created to process a given export opreation for one or more\n * resources and a set of output options.\n */\nclass ExportJob extends EventEmitter {\n\n  /**\n   *\n   * @param {Array} input The path to the HTML or url, or a markdown file\n   *   with 'md' or 'markdown' extension.\n   *\n   * @param output The name of the file to export to.  If the extension is\n   *   '.png' then a PNG image will be generated instead of a PDF.\n   *\n   * @param {Object} args the minimist arg object\n   *\n   * @param {Object} options electron-pdf options\n   * @param {boolean} [options.closeWindow=true] If set to false, the window\n   *   will not be closed when the job is complete.  This can be useful if you\n   *   wish to reuse a window by passing it to the render function.\n   * @param {boolean} [options.inMemory=false] If set to true then `output`\n   *   will\n   *   be ignored and the results array will contain the Buffer object of the\n   *   PDF\n   * @param {array} [options.orientations] must correlate to the input array and\n   * contain a valid orientations ('landscape','portrait').  If not provided or\n   *   length is not equal to source all orientations will be set to portrait\n   *   unless the landscape arg was provided.\n   * @param {object} options.loggers inject your own logger functions which will\n   * override the use of the visionmedia/debug default logger.  If you are using a\n   * more sophisticated logger (i.e. Winston, etc) this allows you to get electron-pdf\n   * logging that is timestamped and potentially includes context about your job.\n   *\n   * @fires ExportJob#window.capture.end after each resource is captured (use\n   *   this with inMemory)\n   * @fires ExportJob#export-complete after each resource is available in\n   *   memory or on the filesystem\n   * @fires ExportJob#job-complete after all export resources are available on\n   *   the filesystem\n   */\n  constructor (input, output, args, options) {\n    super({\n      // Allow listeners to provide wildcards\n      wildcard: true,\n      // displays the event name if maxListeners is reached for an event\n      verboseMemoryLeak: true\n    })\n    this.jobId = uuid()\n    this.input = _.isArray(input) ? input : [input]\n    this.output = output\n    this.args = args\n    this.options = _.extend({}, DEFAULT_OPTIONS, options)\n\n    const defaultOrientation = this.args.landscape ? 'landscape' : 'portrait'\n    const validOrientation = _.size(this.options.orientations) === _.size(this.input)\n    this.orientations = validOrientation\n      ? this.options.orientations\n      : _.fill(Array(_.size(this.input)), defaultOrientation)\n\n    if (_.startsWith(this.args.pageSize, '{')) {\n      this.args.pageSize = JSON.parse(this.args.pageSize)\n    }\n\n    setLogger(this.options.loggers)\n\n    this.originalArgs = _.cloneDeep(this.args)\n  }\n\n  // ***************************************************************************\n  // ************************* Public Functions ********************************\n  // ***************************************************************************\n\n  /**\n   * Render markdown or html to pdf\n   */\n  render () {\n    this.emit(`${RENDER_EVENT_PREFIX}start`)\n    this._launchBrowserWindow()\n    const win = this.window\n    WindowMaid.registerOpenWindow(this)\n\n    // TODO: Check for different domains, this is meant to support only a single origin\n    const firstUrl = this.input[0]\n    this._setSessionCookies(this.args.cookies, firstUrl, win.webContents.session.cookies)\n\n    const windowEvents = []\n    // The same listeners can be used for each resource\n    this._passThroughEvents(win, RENDER_EVENT_PREFIX)\n    this.input.forEach((uriPath, i) => {\n      windowEvents.push((pageDone) => {\n        this._initializeWindowForResource(this.orientations[i] === 'landscape')\n        const targetFile = this._getTargetFile(i)\n        const generateFunction = this._generateOutput.bind(this, win, targetFile, pageDone)\n        const waitFunction = this._waitForPage.bind(this, win, generateFunction, this.args.outputWait)\n        // Need a new listener to generate the resource\n        win.webContents.removeAllListeners('did-finish-load')\n        win.webContents.on('did-finish-load', waitFunction)\n        this._loadURL(win, uriPath)\n      })\n    })\n\n    async.series(windowEvents, (err, results) => {\n      if (this.options.closeWindow) {\n        win.close()\n        this.emit(`${RENDER_EVENT_PREFIX}window.close`)\n      }\n      /**\n       * PDF Generation Event - fires when all PDFs have been persisted to disk\n       * @event PDFExporter#job.complete\n       * @type {object}\n       * @property {String} results - array of generated pdf file locations\n       * @property {Object} error - If an error occurred, null otherwise\n       */\n      this.emit(`${RENDER_EVENT_PREFIX}complete`, {results: results, error: err})\n      this.emit('job-complete', {results: results, error: err}) // Deprecated\n    })\n  }\n\n  /**\n   * If the html page requested emits a CustomEvent\n   * (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent)\n   * you may want to act upon the information it contains.\n   *\n   * Use this method to register your own observer.\n   *\n   * @param handler {function} A callback that is passed the following:\n   *  args[0]: the details object from CustomEvent\n   *\n   * @fires PDFExporter#window.observer.start when the observer is invoked\n   * @fires PDFExporter#window.observer.timeout when the promise is not\n   *   observed by the maximum wait time (default: 10 seconds).  The process\n   *   will continue on and capture the page, it is up to the caller to handle\n   *   this event accordingly.\n   * @fires PDFExporter#window.observer.end when the observer fulfills the\n   *   promise\n   */\n  observeReadyEvent (handler) {\n    this.readyEventObserver = handler\n  }\n\n  /**\n   * Change one of the arguments provided in the constructor.\n   * Intended to be used with observeReadyEvent\n   *\n   * Note that electron-pdf uses the fully named arguments and none of the\n   * aliases (i.e. 'landscape' and not 'l').  Even if you used an alias during\n   * initialization make sure you pass the named argument here.\n   *\n   * @param arg The full name of the argument (i.e 'landscape')\n   * @param value The new value\n   */\n  changeArgValue (arg, value) {\n    this.args[arg] = value\n  }\n\n  /**\n   * Invoke this method to ensure that any allocated resources are destroyed\n   * Resources managed:\n   * - this.window\n   */\n  destroy () {\n    if (this.window) {\n      try {\n        logger(`destroying job with window: ${this.window.id}`)\n        WindowMaid.removeWindow(this.window.id)\n        this.window.close()\n      } finally {\n        this.window = undefined\n      }\n    }\n  }\n\n  // ***************************************************************************\n  // ************************* Private Functions *******************************\n  // ***************************************************************************\n\n  // Events\n  /**\n   * Listen for events and emit them from this job so clients can\n   * do logging or event handling\n   *\n   * @param win\n   * @param renderPrefix\n   */\n  _passThroughEvents (win, renderPrefix) {\n    win.webContents.on('did-fail-load', (r) => {\n      // http://electron.atom.io/docs/api/web-contents/#event-did-fail-load\n      this.emit(`${renderPrefix}did-fail-load`, {results: r})\n    })\n    win.webContents.on('did-start-loading', (r) => {\n      this.emit(`${renderPrefix}did-start-loading`, {results: r})\n    })\n    win.webContents.on('did-finish-load', (r) => {\n      this.emit(`${renderPrefix}did-finish-load`, {results: r})\n    })\n    win.webContents.on('dom-ready', (r) => {\n      this.emit(`${renderPrefix}dom-ready`, {results: r})\n    })\n    win.webContents.on('did-get-response-details',\n      function (event,\n                status,\n                newURL,\n                originalURL,\n                httpResponseCode,\n                requestMethod,\n                referrer,\n                headers,\n                resourceType) {\n        this.emit(`${renderPrefix}did-get-response-details`, {\n          event: event,\n          status: status,\n          newURL: newURL,\n          originalURL: originalURL,\n          httpResponseCode: httpResponseCode,\n          requestMethod: requestMethod,\n          referrer: referrer,\n          headers: headers,\n          resourceType: resourceType\n        })\n      })\n  }\n\n  // Browser Setup\n\n  /**\n   *\n   * @private\n   */\n  _initializeWindowForResource (landscape) {\n    WindowMaid.touchWindow(this.window.id)\n    // Reset the generated flag for each input URL because this same job/window\n    // can be reused in this scenario\n    this.generated = false\n\n    // args can be modified by the client, restore them for each resource\n    this.args = _.cloneDeep(this.originalArgs)\n    const dim = WindowTailor.setWindowDimensions(this.window, this.args.pageSize, landscape)\n    dim && this.emit('window.resize', dim)\n  }\n\n  /**\n   *\n   * @param {String} cookies - ';' delimited cookies, '=' delimited name/value\n   *   pairs\n   * @param {URL} requestedURL - URL Object\n   * @param windowSessionCookies - The cookies object from the Electron\n   *   window.session\n   *\n   * @private\n   */\n  _setSessionCookies (cookies, requestedURL, windowSessionCookies) {\n    if (cookies) {\n      const urlObj = url.parse(requestedURL)\n      cookies.split(';').forEach(function (c) {\n        const nameValue = c.split('=')\n        const cookie = {\n          url: urlObj.protocol + '//' + urlObj.host,\n          name: nameValue[0],\n          value: nameValue[1]\n        }\n        windowSessionCookies.set(cookie, function (err) {\n          if (err) {\n            errorLogger(err)\n          }\n        })\n      })\n    }\n  }\n\n  /**\n   * Launch a browser window\n   * @param args {Object} the minimist arg object\n   * @returns {BrowserWindow}\n   *\n   * @private\n   */\n  _launchBrowserWindow () {\n    const browserConfig = this._getBrowserConfiguration(this.args)\n    this.emit('window.open.start', {})\n    let win = new electron.BrowserWindow(browserConfig)\n    this.window = win\n    this.emit('window.open.end', {\n      width: browserConfig.width,\n      height: browserConfig.height\n    })\n\n    win.on('closed', function () {\n      win = null\n    })\n  }\n\n  /**\n   * see\n   * http://electron.atom.io/docs/api/browser-window/#new-browserwindowoptions\n   * @param args\n   * @returns {Object} for BrowserWindow constructor\n   * @private\n   */\n  _getBrowserConfiguration (args) {\n    const pageDim = WindowTailor.getPageDimensions(args.pageSize, args.landscape)\n\n    const defaultOpts = {\n      width: pageDim.x,\n      height: pageDim.y,\n      enableLargerThanScreen: true,\n      show: false,\n      center: true, // Display in center of screen,\n      webPreferences: {}\n    }\n\n    // This creates a new session for every browser window, otherwise the same\n    // default session is used from the main process which would break support\n    // for concurrency\n    // see http://electron.atom.io/docs/api/browser-window/#new-browserwindowoptions options.partition\n    if (args.cookies) {\n      defaultOpts.webPreferences.partition = this.jobId\n    }\n\n    let cmdLineBrowserConfig = {}\n    try {\n      cmdLineBrowserConfig = JSON.parse(args.browserConfig || '{}')\n    } catch (e) {\n      errorLogger('Invalid browserConfig provided, using defaults. Value:',\n        args.browserConfig,\n        '\\nError:', e)\n    }\n    return _.extend(defaultOpts, cmdLineBrowserConfig)\n  }\n\n  /**\n   * Define load options and load the URL in the window\n   * @param window\n   * @param url\n   *\n   * @private\n   */\n  _loadURL (window, url) {\n    const loadOpts = {}\n    if (this.args.disableCache) {\n      loadOpts.extraHeaders += 'pragma: no-cache\\n'\n    }\n    this.emit(`${RENDER_EVENT_PREFIX}loadurl`, { url: url })\n    window.loadURL(wargs.urlWithArgs(url, {}), loadOpts)\n  }\n\n  // Page Load & Rendering\n\n  /**\n   * Injects a wait if defined before calling the generateFunction\n   * Electron will apply the javascript we provide after the page is loaded,\n   * we don't have to wire up event listeners\n   * (https://github.com/electron/electron/pull/5319)\n   *\n   * @param window used for JavaScript injection to emit event back through IPC\n   * @param generateFunction called when view is ready\n   * @param waitTime wait time passed as an argument (if any), ignored when\n   *   event is set\n   *\n   * @private\n   */\n  _waitForPage (window, generateFunction, waitTime) {\n    const waitForJSEvent = this.args.waitForJSEvent\n    if (waitForJSEvent) {\n      this._waitForBrowserEvent(waitForJSEvent, window, generateFunction)\n    } else {\n      setTimeout(generateFunction, waitTime)\n    }\n  }\n\n  _waitForBrowserEvent (waitForJSEvent, window, generateFunction) {\n    const eventName = _.size(waitForJSEvent) > 0 ? waitForJSEvent : 'view-ready'\n    const ipcListener = this._attachIPCListener(eventName, generateFunction)\n    this._executeJSListener(eventName, ipcListener, generateFunction, window)\n  }\n\n  /**\n   * responsible for executing JS in the browser that will wait for the page\n   * to emit an event before capturing the page.\n   *\n   * @param eventName\n   * @param ipcListener The listener for the ready event.  This needs cancelled\n   *   if there is a timeout before it the event is received\n   * @param generateFunction\n   * @param window\n   * @private\n   */\n  _executeJSListener (eventName, ipcListener, generateFunction, window) {\n    // event.detail will only exist if a CustomEvent was emitted\n    const cmd = `var ipcRenderer = require('electron').ipcRenderer\n                 document.body.addEventListener('${eventName}', \n                   function(event) {\n                     ipcRenderer.send('${IPC_MAIN_CHANNEL_RENDER}', '${this.jobId}', event.detail)\n                     // #169 - allows clients to send event until we acknowledge receipt\n                     document.body.dispatchEvent(new Event('${eventName}-acknowledged'))\n                   }\n                 )`\n\n    // Don't let a ready event hang, set a max timeout interval\n    const f = this._cancelReadyEvent.bind(this, eventName, ipcListener, generateFunction)\n    const maxWait = this.args.outputWait > 0 ? this.args.outputWait : MAX_READY_EVENT_WAIT\n    const timeout = setTimeout(f, maxWait)\n\n    // clear the timeout as soon as we get the ready event from the browser\n    this.once('window.event.wait.end', () => clearTimeout(timeout))\n\n    window.webContents.executeJavaScript(cmd)\n  }\n\n  /**\n   * Invoked when a ready event has not been received before the max timeout is\n   * reached\n   * @param eventName The eventName provided by the client\n   * @param ipcListener The ipcMain listener waiting for the\n   *   IPC_MAIN_CHANNEL_RENDER event from the renderer process\n   * @param generateFunction A callback function to invoke to capture the\n   *   window\n   * @private\n   */\n  _cancelReadyEvent (eventName, ipcListener, generateFunction) {\n    this.emit('window.event.wait.timeout', {eventName: eventName})\n    electron.ipcMain.removeListener(IPC_MAIN_CHANNEL_RENDER, ipcListener)\n    generateFunction()\n  }\n\n  /**\n   * Listen for the browser to emit the READY_TO_RENDER event and when it does\n   * emit our own event so the max load timer is removed.\n   *\n   * @param eventName this is whatever the client provided\n   * @param generateFunction _generateOutput with all of its arguments bound\n   * @private\n   */\n  _attachIPCListener (eventName, generateFunction) {\n    this.emit('window.event.wait.start', {eventName: eventName})\n    const listener = (name, jobId, customEventDetail) => {\n      // Multiple listeners could be active concurrently,\n      // make sure we have the right event for this job\n      // logger(`this.jobId:${this.jobId}, event job id:${jobId}`)\n      if (this.jobId === jobId) {\n        this.emit('window.event.wait.end', {})\n        if (this.readyEventObserver) {\n          this._triggerReadyEventObserver(customEventDetail, generateFunction)\n        } else {\n          generateFunction()\n        }\n        electron.ipcMain.removeListener(IPC_MAIN_CHANNEL_RENDER, listener)\n      }\n    }\n    electron.ipcMain.on(IPC_MAIN_CHANNEL_RENDER, listener)\n    return listener\n  }\n\n  /**\n   * If an event observer was set it is invoked before the generateFunction.\n   *\n   * This function must ensure that the observer does not hang.\n   *\n   * @param customEventDetail detail from the DOMs CustomEvent\n   * @param generateFunction callback function to capture the page\n   * @private\n   */\n  _triggerReadyEventObserver (customEventDetail, generateFunction) {\n    /**\n     * fires right before a readyEventObserver is invoked\n     * @event PDFExporter#window.observer.start\n     * @type {object}\n     * @property {String} detail - The CustomEvent detail\n     */\n    this.emit('window.observer.start', {detail: customEventDetail})\n\n    const timeout = setTimeout(() => {\n      /**\n       * Fires when an observer times out\n       * @event PDFExporter#window.observer.start\n       * @type {object}\n       */\n      this.emit('window.observer.timeout', {})\n      generateFunction()\n    }, MAX_READY_EVENT_WAIT)\n\n    this.readyEventObserver(customEventDetail).then(() => {\n      /**\n       * Fires when an observer fulfills it's promise\n       * @event PDFExporter#window.observer.end\n       * @type {object}\n       */\n      this.emit('window.observer.end', {})\n      clearTimeout(timeout)\n      generateFunction()\n    })\n  }\n\n  // Output\n\n  /**\n   * Create the PDF or PNG file.\n   *\n   * Because of timeouts and promises being resolved this function\n   * is implemented to be idempotent\n   *\n   * @param window\n   * @param outputFile\n   *\n   * @private\n   */\n  _generateOutput (window, outputFile, done) {\n    if (!this.generated) {\n      this.generated = true\n      // Multi-resource jobs can have different orientations, so resize the\n      // window based on the orientations, which can be updated by the client\n      // using changeArgValue\n      const dim = WindowTailor.setWindowDimensions(this.window, this.args.pageSize, this.args.landscape)\n      dim && this.emit('window.resize', dim)\n\n      this.emit('window.capture.start', {})\n\n      if (outputFile.toLowerCase().endsWith('.png')) {\n        this._captureImage(window, outputFile, done)\n      } else if (outputFile.toLowerCase().endsWith('.html')) {\n        this._captureHtml(window, outputFile, done)\n      } else {\n        this._capturePDF(this.args, window, done, outputFile)\n      }\n    }\n  }\n\n  _captureHtml (window, outputFile, done) {\n    window.webContents.executeJavaScript('document.documentElement.outerHTML', result => {\n      const target = path.resolve(outputFile)\n      fs.writeFile(target, result, function (err) {\n        this._emitResourceEvents(err, target, done)\n      }.bind(this))\n    })\n  }\n\n  _captureImage (window, outputFile, done) {\n    // We need a short timeout here or the image may not be captured fully\n    // https://github.com/electron/electron/issues/6622\n    setTimeout(() => {\n      window.webContents.capturePage(image => {\n        // http://electron.atom.io/docs/api/native-image/#imagetopng\n        const pngBuffer = image.toPNG()\n        if (this.options.inMemory) {\n          this._emitResourceEvents(undefined, pngBuffer, done)\n        } else {\n          const target = path.resolve(outputFile)\n          fs.writeFile(target, pngBuffer, function (err) {\n            this._emitResourceEvents(err, target, done)\n          }.bind(this))\n        }\n      })\n    }, PNG_CAPTURE_DELAY)\n  }\n\n  _capturePDF (args, window, done, outputFile) {\n    // TODO: Validate these because if they're wrong a non-obvious error will occur\n    const pdfOptions = {\n      marginsType: args.marginsType,\n      printBackground: args.printBackground,\n      printSelectionOnly: args.printSelectionOnly,\n      pageSize: args.pageSize,\n      landscape: args.landscape\n    }\n    debugLogger(pdfOptions)\n    window.webContents.printToPDF(pdfOptions, this._handlePDF.bind(this, outputFile, done))\n  }\n\n  /**\n   * The callback function for when printToPDF is complete\n   * @param err\n   * @param data\n   * @private\n   */\n  _handlePDF (outputFile, done, err, data) {\n    if (this.options.inMemory || err) {\n      this._emitResourceEvents(err, data, done)\n    } else {\n      const target = path.resolve(outputFile)\n      fs.writeFile(target, data, (fileWriteErr) => {\n        // REMOVE in 2.0 - keeping for backwards compatibility\n        this.emit('pdf-complete', {file: target, error: fileWriteErr})\n        this._emitResourceEvents(fileWriteErr, target, done)\n      })\n    }\n  }\n\n  /**\n   * Emits events when a resource has been captured or an error has occurred\n   * while attempting the capture.\n   *\n   * @param err\n   * @param data\n   * @param done\n   * @private\n   */\n  _emitResourceEvents (err, data, done) {\n    /**\n     * Window Event - fires when an export has captured the window (succesfully\n     * or not)\n     * @event PDFExporter#export-complete\n     * @type {object}\n     * @property {Buffer} data - The Buffer holding the PDF file\n     * @property {Object} error - If an error occurred, undefined otherwise\n     */\n    this.emit('window.capture.end', {data: data, error: err})\n    /**\n     * Generation Event - fires when an export has be persisted to disk\n     * @event PDFExporter#export-complete\n     * @type {object}\n     * @property {String} file - Path to the File\n     */\n    this.emit('export-complete', {data: data})\n    done(err, data)\n  }\n\n  /**\n   * @param zeroBasedIndex Index of the input being processed\n   * @returns {String} the pdf output file name that should be used.\n   * @private\n   */\n  _getTargetFile (zeroBasedIndex) {\n    if (_.size(this.input) > 1) {\n      const ext = path.extname(this.output)\n      return _.replace(this.output, ext, `_${zeroBasedIndex + 1}${ext}`)\n    }\n    return this.output\n  }\n\n}\n\nmodule.exports = ExportJob\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/windowTailor.js":"/** Used to calculate browser dimensions based on PDF size */\nconst HTML_DPI = 96 // dots per inch (HTML:96), PDF:72\n\n/** Used to determine browser size using a Micron -> Inch -> Pixel conversion */\nconst MICRONS_INCH_RATIO = 25400\n\n/**\n * The tailor is responsible for all the sizing and layout of the window\n */\nmodule.exports = {\n\n  /** Used to calculate browser dimensions based on PDF size */\n  HTML_DPI: HTML_DPI,\n\n  /**\n   * Sets the window size based on the pageSize and orientations\n   * If the window size has not changed no action will be taken.\n   *\n   * @param {object} Electron browser window object\n   * @param {string} pageSize One of the Electron supported sizes\n   * @param {boolean} landscape true if the windows should be in landscape\n   *   orientations\n   *\n   * @returns {{dimensions: (*|{x: {number}, y: {number}})}} if the window was resized, undefined otherwise\n   */\n  setWindowDimensions (window, pageSize, landscape) {\n    const pageDim = this.getPageDimensions(pageSize, landscape)\n    var size = window.getSize()\n    if (size[0] !== pageDim.x || size[1] !== pageDim.y) {\n      window.setSize(pageDim.x, pageDim.y)\n      return {dimensions: pageDim}\n    }\n  },\n\n  /**\n   * Translates PDF output size into the browser pixels required to\n   * match that size/aspect-ration.\n   *\n   * @param pageSize\n   * @param landscape\n   * @returns {{x: {number}, y: {number}}}\n   * @private\n   */\n  getPageDimensions (pageSize, landscape) {\n    function pdfToPixels (inches) {\n      return Math.floor(inches * HTML_DPI)\n    }\n\n    const pageDimensions = {\n      'A3': {x: pdfToPixels(11.7), y: pdfToPixels(16.5)},\n      'A4': {x: pdfToPixels(8.3), y: pdfToPixels(11.7)},\n      'A5': {x: pdfToPixels(5.8), y: pdfToPixels(8.3)},\n      'Letter': {x: pdfToPixels(8.5), y: pdfToPixels(11)},\n      'Legal': {x: pdfToPixels(8.5), y: pdfToPixels(14)},\n      'Tabloid': {x: pdfToPixels(11), y: pdfToPixels(17)}\n    }\n\n    let pageDim\n    if (typeof pageSize === 'object') {\n      const xInches = pageSize.width / MICRONS_INCH_RATIO\n      const yInches = pageSize.height / MICRONS_INCH_RATIO\n\n      pageDim = {\n        x: pdfToPixels(xInches),\n        y: pdfToPixels(yInches)\n      }\n    } else {\n      pageDim = pageDimensions[pageSize]\n      if (landscape && pageDim.x < pageDim.y) {\n        pageDim = {x: pageDim.y, y: pageDim.x}\n      }\n    }\n    return pageDim\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/windowMaid.js":"// Third Party Modules\nconst _ = require('lodash')\n\nconst errorLogger = require('./logger').error\nconst infoLogger = require('./logger')\nconst debugLogger = require('./logger').debug\n\n/** How long a window can remain open before it is terminated, in milliseconds */\nconst HUNG_WINDOW_THRESHOLD = process.env.ELECTRONPDF_WINDOW_LIFE_THRESHOLD || 1000 * 60 * 5 /* minutes */\n\n// Window Cache - Keep track of all windows created, and if any get stuck close\n// them\nconst windowCache = {}\n\nconst windowMaid = {\n\n  /**\n   * When a job creates a window it invokes this method so any memory leaks\n   * due to hung windows are prevented.  This can happen if an uncaught\n   * exception occurs and job.destroy() is never invoked.\n   * @param exportJob the ExportJob instance, it must have a window reference set\n   */\n  registerOpenWindow (exportJob) {\n    const w = exportJob.window\n    windowCache[w.id] = {id: w.id, job: exportJob, window: w, lastUsed: Date.now()}\n  },\n\n  /**\n   * Anytime a window is used this function should be invoked to update\n   * the lastUsed property in the window cache\n   * @param id\n   */\n  touchWindow (id) {\n    windowCache[id].lastUsed = Date.now()\n  },\n\n  /**\n   * Allows a job to gracefully remove a window\n   * @param id the window id\n   */\n  removeWindow (id) {\n    delete windowCache[id]\n  },\n\n  /**\n   * Checks every window that was registered to make sure it has been used within\n   * the allowed threshold, and if not it is destroyed and removed from memory.\n   *\n   * @param {number} [threshold=process.env.ELECTRONPDF_WINDOW_LIFE_THRESHOLD]\n   * the number of millseconds that a window has to be open and untouched for it to be destroyed.\n   */\n  cleanupHungWindows (threshold) {\n    const now = Date.now()\n    const th = threshold || HUNG_WINDOW_THRESHOLD\n    const hungWindows = _.filter(windowCache, e => now - e.lastUsed >= th)\n\n    debugLogger(`checking hung windows-> ` +\n      `total windows: ${_.size(windowCache)}, ` +\n      `hung windows: ${_.size(hungWindows)}, ` +\n      `threshold: ${th}`)\n\n    _.forEach(hungWindows, e => {\n      infoLogger('destroying hung window: ', e.id)\n      const destroyable = e.job && e.window && !e.window.isDestroyed()\n      if (destroyable) {\n        const windowContext = {\n          id: e.window.id,\n          lifespan: now - e.lastUsed\n        }\n        e.job.emit('window.termination', windowContext)\n        delete windowCache[e.id]\n        e.job.destroy()\n      } else {\n        errorLogger('a window was left in the cache that was already destroyed, do proper cleanup')\n        delete windowCache[e.id]\n      }\n    })\n  },\n\n  windowCount () {\n    return _.size(windowCache)\n  }\n\n}\n\nmodule.exports = windowMaid\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/args.js":"var assert = require('assert')\nvar assign = require('object-assign')\nvar path = require('path')\nvar url = require('url')\n\nfunction encode (args) {\n  assert.strictEqual(typeof args, 'object', 'args must be an object')\n  // stringify the args\n  args = args ? encodeURIComponent(JSON.stringify(args)) : ''\n  return args\n}\n\nfunction urlWithArgs (urlOrFile, args) {\n  args = encode(args)\n\n  var u\n  if (urlOrFile.indexOf('http') === 0) {\n    var urlData = url.parse(urlOrFile)\n    var hash = urlData.hash || args ? args : undefined\n    u = url.format(assign(urlData, { hash: hash }))\n  } else { // presumably a file url\n    u = url.format({\n      protocol: 'file',\n      pathname: path.resolve(urlOrFile),\n      slashes: true,\n      hash: args\n    })\n  }\n\n  return u\n}\n\nmodule.exports = {\n  encode: encode,\n  urlWithArgs: urlWithArgs\n}\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/source.js":"'use strict'\n\nconst _ = require('lodash')\nconst path = require('path')\n\nconst logger = require('./logger')\nconst markdownToHTMLPath = require('./markdown')\n\nclass Source {\n\n  /**\n   * Given a single URL String or an array of URLs return an array with any\n   * transformations applied (i.e. markdown processor)\n   *\n   * @param input\n   * @param args\n   * @returns {Array} of Promises\n   */\n  resolve (input, args) {\n    const files = _.isArray(input) ? input : [input]\n    // wargs.urlWithArgs(this.markdown(input, args), {})\n    const promises = files.map(i => { return this.markdown(i, args) })\n    return Promise.all(promises)\n  }\n\n  markdown (input, args) {\n    return new Promise((resolve, reject) => {\n      if (this._isMarkdown(input)) {\n        var opts = {}\n        if (args.css) {\n          opts.customCss = args.css\n        }\n        // if given a markdown, render it into HTML and return the path of the HTML\n        markdownToHTMLPath(input, opts, (err, tmpHTMLPath) => {\n          if (err) {\n            logger('Parse markdown file error', err)\n            reject(err)\n          }\n          resolve(tmpHTMLPath)\n        })\n      } else {\n        resolve(input)\n      }\n    })\n  }\n\n  _isMarkdown (input) {\n    var isMd = false\n    if (_.isString(input)) {\n      var ext = path.extname(input).toLowerCase()\n      isMd = ext.indexOf('md') > 0 || ext.indexOf('markdown') > 0\n    }\n    return isMd\n  }\n}\n\nmodule.exports = Source\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/markdown.js":"const marked = require('marked')\nconst fs = require('fs')\nconst os = require('os')\nconst path = require('path')\nconst uuid = require('uuid')\nconst highlightjs = require('highlight.js')\nconst logger = require('./logger')\n\n/**\n * parse the markdown content and write it to system tmp directory\n * @param  {String} input Path of the markdown file\n * @param  {Object} options Markdown parser options\n * @return {Function}         The callback function with HTML path\n */\nmodule.exports = function (input, options, cb) {\n  if (options instanceof Function) {\n    cb = options\n    options = {}\n  }\n\n  marked.setOptions({\n    renderer: options.renderer || new marked.Renderer(),\n    gfm: options.gfm || true,\n    tables: options.tables || true,\n    breaks: options.breaks || false,\n    pedantic: options.pedantic || false,\n    sanitize: options.sanitize || true,\n    smartLists: options.smartLists || true,\n    smartypants: options.smartypants || false,\n    highlight: function (code, lang) {\n      return highlightjs.highlightAuto(code, [ lang ]).value\n    }\n  })\n\n  fs.readFile(input, function (err, markdownContent) {\n    if (err) {\n      cb(err)\n    }\n\n    var htmlBody = marked(markdownContent.toString())\n    var githubMarkdownCssPath = 'node_modules/github-markdown-css/github-markdown.css'\n    var highlightjsDefaultCssPath = 'node_modules/highlight.js/styles/default.css'\n    var highlightjsGithubCssPath = 'node_modules/highlight.js/styles/github.css'\n\n    var htmlHeader = '<meta charset=\"utf-8\">' +\n      '<link rel=\"stylesheet\" href=\"' + path.resolve(githubMarkdownCssPath) + '\">' +\n      '<link rel=\"stylesheet\" href=\"' + path.resolve(highlightjsDefaultCssPath) + '\">' +\n      '<link rel=\"stylesheet\" href=\"' + path.resolve(highlightjsGithubCssPath) + '\">'\n\n    // inject custom css if exist\n    // todo: validate css\n    if (options.customCss) {\n      htmlHeader += '<link rel=\"stylesheet\" href=\"' + path.resolve(options.customCss) + '\">'\n    }\n\n    htmlHeader += '<style> .markdown-body { min-width: 200px; max-width: 790px; margin: 0 auto; padding: 30px; } </style>' +\n      '<body><article class=\"markdown-body\">\\n'\n\n    var htmlFooter = '\\n </article></body>'\n\n    var htmlContent = htmlHeader + htmlBody + htmlFooter\n\n    var tmpHTMLPath = path.join(os.tmpdir(), path.parse(input).name + '-' + uuid() + '.html')\n\n    fs.writeFile(tmpHTMLPath, htmlContent, function (err) {\n      if (err) {\n        cb(err)\n      }\n      logger('Converted markdown to html:', input, '->', tmpHTMLPath)\n      cb(null, tmpHTMLPath)\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-electron-pdf/node_modules/electron-pdf/lib/charge.js":"const parseArgs = require('minimist')\nconst fs = require('fs')\nconst path = require('path')\n\nconst pkg = require('../package.json')\nconst Exporter = require('./index')\nconst argOptions = require('./options')\nconst logger = require('./logger')\n\nconst argv = parseArgs(process.argv.slice(2), argOptions)\nconst input = argv._[0] || argv.input\nconst output = argv._[1] || argv.output\n\nif (argv.version) {\n  console.log('v' + pkg.version)\n  process.exit(0)\n}\n\nif (argv.help || !input || !output) {\n  usage(1)\n} else {\n  const exporter = new Exporter()\n  exporter.on('charged', () => {\n    exporter.createJob(input, output, argv).then(job => {\n      job.on('job-complete', () => {\n        logger('Export Complete')\n        exporter.stop()\n      })\n      job.render()\n    })\n  })\n  exporter.start()\n}\n\nfunction usage (code) {\n  const rs = fs.createReadStream(path.join(__dirname, '../usage.txt'))\n  rs.pipe(process.stdout)\n  rs.on('close', function () {\n    if (code) process.exit(code)\n  })\n}\n"}